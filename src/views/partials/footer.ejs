</div>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script src="/js/scripts.js"></script>

<!-- Bootstrap core JavaScript-->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- Core plugin JavaScript-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.4.1/jquery.easing.min.js"></script>
<!-- Custom scripts for all pages-->
<script src="/js/sb-admin-2.min.js"></script>
<!-- SweetAlert JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.all.min.js"></script>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Handle delete entity
        window.deleteEntity = function (entityType, id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/${entityType}s/${id}`, {
                        method: 'DELETE'
                    })
                        .then(response => {
                            if (response.ok) {
                                Swal.fire('Deleted!', `${entityType} has been deleted.`, 'success')
                                    .then(() => {
                                        location.reload();
                                    });
                            } else {
                                Swal.fire('Failed!', `Failed to delete ${entityType}.`, 'error');
                            }
                        });
                }
            });
        }

        // Handle edit entity
        window.editEntity = function (entityType, id) {
            fetch(`/${entityType}s/${id}`)
                .then(response => response.json())
                .then(data => {
                    const modal = $('#editModal');
                    modal.find('.modal-title').text(`Edit ${entityType}`);
                    modal.find('form').attr('action', `/${entityType}s/${id}?_method=PUT`);
                    for (const key in data) {
                        modal.find(`[name="${key}"]`).val(data[key]);
                    }
                    modal.modal('show');
                })
                .catch(error => {
                    Swal.fire('Error!', 'Failed to fetch data for editing.', 'error');
                });
        }

        // Handle form submission for editing
        $('#editModal form').on('submit', function (event) {
            event.preventDefault();
            const form = $(this);
            const formData = form.serialize();
            const action = form.attr('action');
            const method = form.find('input[name="_method"]').val();

            fetch(action, {
                method: method,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        Swal.fire('Error!', data.error, 'error');
                    } else {
                        Swal.fire('Success!', 'Operation completed successfully.', 'success')
                            .then(() => {
                                location.reload();
                            });
                    }
                })
                .catch(error => {
                    Swal.fire('Error!', 'An error occurred.', 'error');
                });
        });
    });
</script>
</body>

</html>